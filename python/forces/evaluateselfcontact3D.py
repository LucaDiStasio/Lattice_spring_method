# Autogenerated with SMOP 
from smop.core import *
# 

    
@function
def evaluateselfcontact3D(N=None,lattice=None,boundary=None,Rcsq=None,ksc=None,*args,**kwargs):
    varargin = evaluateselfcontact3D.varargin
    nargin = evaluateselfcontact3D.nargin

    ##
#        Project: Fluid - structure interaction on deformable surfaces
#         Author: Luca Di Stasio
#    Institution: ETH Zrich
#                 Institute for Building Materials
# Research group: Computational Physics for Engineering Materials
#        Version: 0.1
#  Creation date: July 28th, 2014
#    Last update: July 29th, 2014
    
    #    Description: 
#          Input: 
#         Output:
    
    ##
    
    Nb=size(boundary,1)
    indicesrow=matlabarray([])
    indicescolumn=matlabarray([])
    distances=matlabarray([])
    index=(arange(1,Nb)).T
    for row in arange(1,Nb - 1).reshape(-1):
        columns=index[row + 1:end()]
        numcol=length(columns)
        indicesrow=matlabarray(cat([indicesrow],[dot(row,ones(length(columns),1))]))
        indicescolumn=matlabarray(cat([indicescolumn],[columns]))
        distances=matlabarray(cat([distances],[sum((cat(dot(lattice[boundary[row],7],ones(length(columns),1)),dot(lattice[boundary[row],8],ones(length(columns),1)),dot(lattice[boundary[row],9],ones(length(columns),1))) - lattice[boundary[columns],7:9]) ** 2,2)]))
    
    clear('val','numcol','columns','row')
    rows,cols=find(sparse(indicesrow,indicescolumn,distances,Nb,Nb) < Rcsq,nargout=2)
    clear('indicesrow','indicescolumn','distances')
    if logical_not(isempty(rows)):
        F=sparse((arange(1,dot(3,N))).T,ones(dot(3,N),1),zeros(dot(3,N),1),dot(3,N),1)
        for i in arange(1,length(rows)).reshape(-1):
            Fc2=multiply(ksc,(lattice[boundary[cols[i]],7:9] - lattice[boundary[rows[i]],7:9]))
            Fc1=- Fc2
            F[boundary[rows[i]],1]=F[boundary[rows[i]],1] + Fc1[1,1]
            F[N + boundary[rows[i]],1]=F[N + boundary[rows[i]],1] + Fc1[1,2]
            F[dot(2,N) + boundary[rows[i]],1]=F[dot(2,N) + boundary[rows[i]],1] + Fc1[1,3]
            F[boundary[cols[i]],1]=F[boundary[cols[i]],1] + Fc2[1,1]
            F[N + boundary[cols[i]],1]=F[N + boundary[cols[i]],1] + Fc2[1,2]
            F[dot(2,N) + boundary[cols[i]],1]=F[dot(2,N) + boundary[cols[i]],1] + Fc2[1,3]
        clear('rows','cols')
        Fselfcontact=sparse(cat([(arange(1,N)).T],[(arange(1,N)).T],[(arange(1,N)).T]),cat([ones(N,1)],[dot(2,ones(N,1))],[dot(3,ones(N,1))]),F,N,3)
    else:
        clear('rows','cols')
        Fselfcontact=sparse(cat([(arange(1,N)).T],[(arange(1,N)).T],[(arange(1,N)).T]),cat([ones(N,1)],[dot(2,ones(N,1))],[dot(3,ones(N,1))]),zeros(dot(3,N),1),N,3)
    
    return Fselfcontact